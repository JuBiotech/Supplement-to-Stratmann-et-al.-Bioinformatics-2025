#!/usr/bin/env python

from os import makedirs
from freeflux import Model
import numpy as np
from time import perf_counter


MODEL_FILE = './reactions.xlsx'
OUT_DIR = './sim_stat'
MIN = True


def ecoli_stat_simulation():
    model = Model('ecoli')
    model.read_from_file(MODEL_FILE)

    with model.simulator('ss') as sim:
        if MIN:
            sim.set_target_EMUs({
                'Ala': ['23'],
            })
        else:
            sim.set_target_EMUs({
                'AKG': ['12345'],
                'Ala': ['23', '123'],
                'Asp': ['12', '234', '1234'],
                'Cit': ['123456'],
                'Glu': ['2345', '12345'],
                'Gly': ['2', '12'],
                'Ile': ['23456'],
                'Leu': ['23456'],
                'Mal': ['1234'],
                'Met': ['2345', '12345'],
                'Phe': ['23456789', '12', '123456789'],
                'Pyr': ['123'],
                'Ser': ['23', '12'],
                'Suc': ['1234'],
                'Thr': ['234', '1234'],
                'Tyr': ['12'],
                'Val': ['2345', '12345']
            })

        # specify the lableing strategy
        sim.set_labeling_strategy(
            'Gluc.ext',
            labeling_pattern = ['100000', '111111'],
            percentage = [0.75, 0.25],
            purity = [1, 1]
        )   # call this method for each labeled substrate

        fluxes = {'R1_f': 77.5311428582956,
                  'R1_b': 17.1878684051923,
                  'R2': 85.2342527495551,
                  'R3_f': 290.460568690959,
                  'R3_b': 205.226315941404,
                  'R4_f': 274.58349210525,
                  'R4_b': 316.531346047879,
                  'R5_f': 22452.7327332828,
                  'R5_b': 22397.1392683668,
                  'R6_f': 989.267498573664,
                  'R6_b': 935.246143767407,
                  'R7': 48.3879065275648,
                  'R8': 38.4677367634062,
                  'R9': 38.40734676431,
                  'R10_f': 109.993962875841,
                  'R10_b': 85.038822189774,
                  'R11_f': 26363.1226030407,
                  'R11_b': 26349.6703969624,
                  'R12_f': 54.0193540016333,
                  'R12_b': 29.0642133155664,
                  'R13_f': 5.06020365280151,
                  'R13_b': 17.374656934912,
                  'R14_f': 7.00E-07,
                  'R14_b': 12.6406881042248,
                  'R15_f': 2721.0906560371,
                  'R15_b': 2733.73134344106,
                  'R16_f': 17236.9753436607,
                  'R16_b': 17224.3346562568,
                  'R17': 0.0603899990961896,
                  'R18': 0.0603899990961896,
                  'R19': 48.6774682891174,
                  'R20': 45.7121925483922,
                  'R21_f': 327.201452172649,
                  'R21_b': 281.223109200753,
                  'R22_f': 459.824613244887,
                  'R22_b': 413.84627027299,
                  'R23': 45.004159084501,
                  'R24_f': 46.1578149647674,
                  'R24_b': 1.58020021686256,
                  'R25_f': 332.33436213708,
                  'R25_b': 287.330203052579,
                  'R26_f': 169779.414115059,
                  'R26_b': 169734.074684896,
                  'R27_f': 249.222338605285,
                  'R27_b': 206.49151079464,
                  'R28': 2.60860235198545,
                  'R29': 11.6730936678694,
                  'R29_b': 6.73820210991639,
                  'R30_f': 1180.31578504477,
                  'R30_b': 1180.46671495906,
                  'R31_f': 231.285023489945,
                  'R31_b': 104.102916797761,
                  'R32': 127.182106692184,
                  'R33': 129.16522116879,
                  'R34': 129.16522116879,
                  'R35': 5.90235643259762,
                  'R36': 0.609994549157668,
                  'R37': 0.189776081960163,
                  'R38': 0.253938471575266,
                  'R39': 1.64627030655621,
                  'R40': 0.206946298899416,
                  'R41': 0.441003466650284,
                  'R42': 1.01272251577938,
                  'R43_f': 1.41211616160504,
                  'R43_b': 0.84401189498947,
                  'R44_f': 0.215792532527811,
                  'R44_b': 0.170287467472186,
                  'R45': 0.00335165415822219,
                  'R46': 0.210561081412943,
                  'R47': 0.294604774852444,
                  'R48': 0.294604774852444,
                  'R49': 0.470562294031577,
                  'R50': 0.131939561743733,
                  'R51': 0.363285642609455,
                  'R52': 0.386781728947381,
                  'R53': 0.249419993433358,
                  'R54': 0.159050430595184,
                  'R55': 0.118384127318007,
                  'R56': 0.0487995639326134,
                  'R57': 0.0813326065543557,
                  'R58': 0.131939561743733,
                  'R59': 0.0813326065543557,
                  'R60': 6.40840700322167,
                  'R61': 92.5878618171061,
                  'R62': 0.266150423504335,
                  'R63': 91.9608073960771,
                  'R63b': 89.9776929194707,
                  'R64': 129.16522116879,
                  'R65': 0.313569638697864,
                  'R66': 177.539702487974,
                  'R67': 0.90369562838173,}

        for fluxid, value in fluxes.items():
            sim.set_flux(fluxid, value)

        # simulate MDVs
        sim.prepare(n_jobs = 1)
        times = []
        sim.simulate()
        for i in range(100):
            before = perf_counter()
            res = sim.simulate()
            after = perf_counter()
            times.append(after-before)

        print(f"{np.average(times)*1000}ms +- {np.std(times)*1000}ms\n")

        print((np.array(times)*1000).tolist())



if __name__ == '__main__':

    makedirs(OUT_DIR, exist_ok = True)
    ecoli_stat_simulation()
